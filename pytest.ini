[pytest]
# Feature 021: Automated Validation & Regression Testing
# Pytest configuration for Soundlab Î¦-Matrix

# Test discovery
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*
testpaths = tests

# Markers (FR-002)
markers =
    unit: Unit tests - fast, isolated, no I/O
    integration: Integration tests - require server/services
    perf: Performance tests - measure FPS, latency, resource usage
    e2e: End-to-end tests - full system with browser
    golden: Golden data regression tests
    slow: Slow tests (>5s) - deselect with '-m "not slow"'
    hardware: Requires physical hardware (audio, sensors)
    avx2: Requires AVX2 CPU support
    skip_ci: Skip in CI environment

# Output options
addopts =
    --verbose
    --strict-markers
    --tb=short
    --color=yes
    # Coverage (FR-009)
    --cov=server
    --cov-report=term-missing
    --cov-report=html:tests/reports/coverage_html
    --cov-report=xml:tests/reports/coverage.xml
    # JUnit XML for CI (SC-002)
    --junit-xml=tests/reports/junit.xml
    # Performance
    --durations=10
    # Warnings
    -W ignore::DeprecationWarning
    -W ignore::PendingDeprecationWarning

# Timeout for tests
timeout = 300
timeout_method = thread

# Asyncio mode
asyncio_mode = auto

# Minimum Python version
minversion = 7.0

# Consider test discovery patterns
norecursedirs =
    .git
    .tox
    dist
    build
    *.egg
    __pycache__
    .venv
    venv
    node_modules

# Console output settings
console_output_style = progress

# Log settings
log_cli = false
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

log_file = tests/reports/pytest.log
log_file_level = DEBUG
log_file_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_file_date_format = %Y-%m-%d %H:%M:%S

# Coverage settings (FR-009)
[coverage:run]
source = server
omit =
    */tests/*
    */test_*.py
    */__pycache__/*
    */venv/*
    */.venv/*
    */node_modules/*
    */build/*
    */dist/*

[coverage:report]
precision = 2
show_missing = true
skip_covered = false
# Coverage thresholds (SC-005)
fail_under = 85

exclude_lines =
    pragma: no cover
    def __repr__
    raise AssertionError
    raise NotImplementedError
    if __name__ == .__main__.:
    if TYPE_CHECKING:
    @abstractmethod
    @abc.abstractmethod

[coverage:html]
directory = tests/reports/coverage_html

[coverage:xml]
output = tests/reports/coverage.xml
